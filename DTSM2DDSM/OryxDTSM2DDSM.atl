-- @path OryxDTSM=/DiceSeptember/model/DTSM-Oryx/OryxDTSM.ecore
-- @path OryxDDSM=/DiceSeptember/model/DDSM-oryx/Cloud.ecore

module OryxDTSM2DDSM;
create OUT : OryxDDSM from IN : OryxDTSM;

rule OryxDTSM2DDSM{	
	from 
		s: OryxDTSM!DIA
	to 
		t: OryxDDSM!Oryx2(
			usesHadoopCluster <- thisModule.getHadoopCluster(s)	
					
		)
}

lazy rule getHadoopCluster{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!HMR_DDSM(
			hasMasterNode <- thisModule.getMasteNode(i),
			hasSlaves <- thisModule.getSlaveNodes(i)		
	       
		)
}

lazy rule getOryxRunner{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!OryxRunner(
	      name <- 'oryx'
	
		)
}


lazy rule getSlaveNodes{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!SlaveNode(
		    slaveType <- 'WorkerNode',	
			name <- 'worker',
			contains_worker_chef <- thisModule.getWorkerChef(i)			
		)
}

lazy rule getWorkerChef{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!worker_chef(
			type <- 'workerChef',
			chef_cook_books <- '- \'recipe[apt::default]\'',
			chef_cook_books <- '- \'recipe[java::default]\'',
			chef_cook_books <- '- \'recipe[hadoop::hadoop_hdfs_datanode]\'',
			chef_cook_books <- '- \'recipe[hadoop::hadoop_yarn_nodemanager]\'',		
			chef_cook_books <- '- \'recipe[hadoop::zookeeper_server]\'',
			chef_cook_books <- '- \'recipe[hadoop::spark_worker]\'',
			chef_cook_books <- '- \'recipe[apache_kafka::default]\'',
			chef_cook_books <- '- \'recipe[collectd-ng::default]\''
	
		)
}


lazy rule getMasteNode{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!MasterNode(
		    masterType <- 'masternode',
			name <- 'master',
			--contains_hadoopRunner <- thisModule.getHadoopRunner(i),
			contains_master_chef <- thisModule.getMasterChef(i),
			contains_config <- thisModule.getConfigNode(i),
			hasOryxRunner <- thisModule.getOryxRunner(i)
			
			
			--contains_hadoopRunner <- thisModule.getHadoopRunner(i),
			
		)
}

lazy rule getConfigNode{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!config(
			type <- 'config'
	
		)
}


lazy rule getHadoopRunner{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!hadooprunner(
			name <- 'hadoop'
	
		)
}


lazy rule getMasterChef{
	from
	    i: OryxDTSM!DIA
	to 
		j: OryxDDSM!master_chef(
			type <- 'masterChef',		
			chef_cook_books <- '- \'recipe[apt::default]\'',
			chef_cook_books <- '- \'recipe[java::default]\'',
			chef_cook_books <- '- \'recipe[hadoop::hadoop_hdfs_namenode]\'',
			chef_cook_books <- '- \'recipe[hadoop::hadoop_yarn_resourcemanager]\'',
			chef_cook_books <- '- \'recipe[hadoop::hadoop_mapreduce_historyserver]\'',
			chef_cook_books <- '- \'recipe[hadoop::zookeeper_server]\'',
			chef_cook_books <- '- \'recipe[hadoop::spark_master]\'',
			chef_cook_books <- '- \'recipe[apache_kafka::default]\'',
			chef_cook_books <- '- \'recipe[collectd-ng::default]\''
	
		)
}










