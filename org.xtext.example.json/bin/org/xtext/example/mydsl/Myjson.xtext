// automatically generated by Xtext
grammar org.xtext.example.mydsl.Myjson with org.eclipse.xtext.common.Terminals



import "http://www.w3.org/XML/1998/namespace" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.polimi.mymodelingproject/model/TOSCA/_12.ecore" as _12

  TServiceTemplate  returns  _12::TServiceTemplate:
'{'
	id=STRING ':' (name=STRING)?','
	('"Imports":' hasImports=TimportTemplate',')?
		
		('substitutableNodeType' substitutableNodeType=QName)?
		('targetNamespace' targetNamespace=AnyURI)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('boundaryDefinitions' boundaryDefinitions=TBoundaryDefinitions)?
		topologyTemplate=TTopologyTemplate
		('plans' plans=TPlans)?
		('hasNodeType' '{' hasNodeType+=TNodeType ( "," hasNodeType+=TNodeType)* '}' )?
		('hasRelationship' '{' hasRelationship+=TRelationshipType ( "," hasRelationship+=TRelationshipType)* '}' )?
		
 '}'
	;






TConstraint returns _12::TConstraint:
	TConstraint_Impl | TPropertyConstraint;


TDocumentation returns _12::TDocumentation:
	{_12::TDocumentation}
	'TDocumentation'
	'{'
		('lang' lang=LangType)?
		('source' source=AnyURI)?
	'}';

TTags returns _12::TTags:
	'TTags'
	'{'
		'tag' '{' tag+=TTag ( "," tag+=TTag)* '}' 
	'}';

TBoundaryDefinitions returns _12::TBoundaryDefinitions:
	{_12::TBoundaryDefinitions}
	'TBoundaryDefinitions'
	'{'
		('properties' properties=PropertiesType1)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType1)?
		('requirements' requirements=RequirementsType1)?
		('capabilities' capabilities=CapabilitiesType1)?
		('policies' policies=PoliciesType1)?
		('interfaces' interfaces=InterfacesType1)?
	'}';

TTopologyTemplate returns _12::TTopologyTemplate:
	{_12::TTopologyTemplate}
	
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('"inputs":' '{' hasInputs+=TInputTemplate ( "," hasInputs+=TInputTemplate)* '}' )?
		(',"node_templates":' '{' nodeTemplate+=TNodeTemplate ( "," nodeTemplate+=TNodeTemplate)* '}' ',')?
		('relationshipTemplate' '{' relationshipTemplate+=TRelationshipTemplate ( "," relationshipTemplate+=TRelationshipTemplate)* '}' )?
		
		('"outputs":' '{' hasoutPuts+=TOutputTemplate ( "," hasoutPuts+=TOutputTemplate)* '}' )?
	;

TPlans returns _12::TPlans:
	'TPlans'
	'{'
		('targetNamespace' targetNamespace=AnyURI)?
		'plan' '{' plan+=TPlan ( "," plan+=TPlan)* '}' 
	'}';

ID0 returns type::ID:
	'ID' /* TODO: implement this rule and an appropriate IValueConverter */;

 String0 returns type::String :
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;
	


QName returns type::QName:
	'QName' /* TODO: implement this rule and an appropriate IValueConverter */;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

TNodeType returns _12::TNodeType:
	'TNodeType'
	'{'
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		'name' name=NCName
		('targetNamespace' targetNamespace=AnyURI)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType2)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('requirementDefinitions' requirementDefinitions=RequirementDefinitionsType)?
		('capabilityDefinitions' capabilityDefinitions=CapabilityDefinitionsType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('interfaces' interfaces=InterfacesType)?
	'}';

TRelationshipType returns _12::TRelationshipType:
	
	'{'
		'"type":' name=STRING','
		('"target":' targetNamespace=STRING)?
		
		('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?		
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derivedFrom' derivedFrom=DerivedFromType2)?
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('sourceInterfaces' sourceInterfaces=SourceInterfacesType)?
		('targetInterfaces' targetInterfaces=TargetInterfacesType)?
		('validSource' validSource=ValidSourceType)?
		('validTarget' validTarget=ValidTargetType)?
	'}';

TimportTemplate returns _12::TimportTemplate:
	
	'['
		 value+=EString ( "," value+=EString)* 
	']';

LangType returns LangType:
	'LangType' /* TODO: implement this rule and an appropriate IValueConverter */;

TTag returns _12::TTag:
	'TTag'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

PropertiesType1 returns _12::PropertiesType1:
	{_12::PropertiesType1}
	'PropertiesType1'
	'{'
		('propertyMappings' propertyMappings=PropertyMappingsType)?
	'}';

PropertyConstraintsType1 returns _12::PropertyConstraintsType1:
	'PropertyConstraintsType1'
	'{'
		'propertyConstraint' '{' propertyConstraint+=TPropertyConstraint ( "," propertyConstraint+=TPropertyConstraint)* '}' 
	'}';

RequirementsType1 returns _12::RequirementsType1:
	'RequirementsType1'
	'{'
		'requirement' '{' requirement+=TRequirementRef ( "," requirement+=TRequirementRef)* '}' 
	'}';

CapabilitiesType1 returns _12::CapabilitiesType1:
	'CapabilitiesType1'
	'{'
		'capability' '{' capability+=TCapabilityRef ( "," capability+=TCapabilityRef)* '}' 
	'}';

PoliciesType1 returns _12::PoliciesType1:
	'PoliciesType1'
	'{'
		'policy' '{' policy+=TPolicy ( "," policy+=TPolicy)* '}' 
	'}';

InterfacesType1 returns _12::InterfacesType1:
	'InterfacesType1'
	'{'
		'interface' '{' interface+=TExportedInterface ( "," interface+=TExportedInterface)* '}' 
	'}';

PropertyMappingsType returns _12::PropertyMappingsType:
	'PropertyMappingsType'
	'{'
		'propertyMapping' '{' propertyMapping+=TPropertyMapping ( "," propertyMapping+=TPropertyMapping)* '}' 
	'}';

TPropertyMapping returns _12::TPropertyMapping:
	'TPropertyMapping'
	'{'
		'serviceTemplatePropertyRef' serviceTemplatePropertyRef=String0
		'targetObjectRef' targetObjectRef=IDREF
		'targetPropertyRef' targetPropertyRef=String0
	'}';

IDREF returns type::IDREF:
	'IDREF' /* TODO: implement this rule and an appropriate IValueConverter */;

TPropertyConstraint returns _12::TPropertyConstraint:
	'TPropertyConstraint'
	'{'
		'constraintType' constraintType=AnyURI
		'property' property=String0
	'}';

TRequirementRef returns _12::TRequirementRef:
	'TRequirementRef'
	'{'
		('name' name=String0)?
		'ref' ref=IDREF
	'}';

TCapabilityRef returns _12::TCapabilityRef:
	'TCapabilityRef'
	'{'
		('name' name=String0)?
		'ref' ref=IDREF
	'}';

TPolicy returns _12::TPolicy:
	'TPolicy'
	'{'
		('name' name=String0)?
		('policyRef' policyRef=QName)?
		'policyType' policyType=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

TExportedInterface returns _12::TExportedInterface:
	'TExportedInterface'
	'{'
		'name' name=AnyURI
		'operation' '{' operation+=TExportedOperation ( "," operation+=TExportedOperation)* '}' 
	'}';

TExportedOperation returns _12::TExportedOperation:
	'TExportedOperation'
	'{'
		'name' name=NCName
		('nodeOperation' nodeOperation=NodeOperationType)?
		('relationshipOperation' relationshipOperation=RelationshipOperationType)?
		('plan' plan=PlanType)?
	'}';

NodeOperationType returns _12::NodeOperationType:
	'NodeOperationType'
	'{'
		'interfaceName' interfaceName=AnyURI
		'nodeRef' nodeRef=IDREF
		'operationName' operationName=NCName
	'}';

RelationshipOperationType returns _12::RelationshipOperationType:
	'RelationshipOperationType'
	'{'
		'interfaceName' interfaceName=AnyURI
		'operationName' operationName=NCName
		'relationshipRef' relationshipRef=IDREF
	'}';

PlanType returns _12::PlanType:
	'PlanType'
	'{'
		'planRef' planRef=IDREF
	'}';

NCName returns type::NCName:
	'NCName' /* TODO: implement this rule and an appropriate IValueConverter */;

TNodeTemplate returns _12::TNodeTemplate:
	
	id=STRING':' '{'
	
		'"type":' type=STRING
		('maxInstances' maxInstances=MaxInstancesType)?
		('minInstances' minInstances=Int0)?
		(',"instances":{  "deploy":' instances=STRING '}')?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		(',''"properties":' '{' properties=PropertiesType '}')?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		(',''"relationships": ' '[' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* ']' )?
		('requirements' requirements=RequirementsType)?
		('capabilities' capabilities=CapabilitiesType)?
		('policies' policies=PoliciesType)?
		('deploymentArtifacts' deploymentArtifacts=TDeploymentArtifacts)?
	'}';

TRelationshipTemplate returns _12::TRelationshipTemplate:
	'TRelationshipTemplate'
	id=ID0
	'{'
		'type' type=EString
		('name' name=String0)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
		'sourceElement' sourceElement=SourceElementType
		'targetElement' targetElement=TargetElementType
		('relationshipConstraints' relationshipConstraints=RelationshipConstraintsType)?
		('usesRelationType' usesRelationType=TRelationshipType)?
	'}';

TInputTemplate returns _12::TInputTemplate:
	{_12::TInputTemplate}
	
	name=STRING':' '{'	
	
	    ( '"default":'  value+=STRING ( "," value+=STRING)* )? 
		(  ',"description":' description=STRING)?
	'}';

TOutputTemplate returns _12::TOutputTemplate:
	{_12::TOutputTemplate}
	
	name=STRING':' '{'
	
		('"value":' '{' '"get_attribute":' '[' value+=STRING ( "," value+=STRING)* ']' '}' )?
	'}';

PropertiesType returns _12::PropertiesType:
	
	
		 property+=TProperty ( "," property+=TProperty)* 
	;

PropertyConstraintsType returns _12::PropertyConstraintsType:
	'PropertyConstraintsType'
	'{'
		'propertyConstraint' '{' propertyConstraint+=TPropertyConstraint ( "," propertyConstraint+=TPropertyConstraint)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

AttributesType returns _12::AttributesType:
	'AttributesType'
	'{'
		'attribute' '{' attribute+=TAttribute ( "," attribute+=TAttribute)* '}' 
	'}';

TInterface returns _12::TInterface:
	'TInterface'
	'{'
		'name' name=AnyURI
		'operation' '{' operation+=TOperation ( "," operation+=TOperation)* '}' 
	'}';

RequirementsType returns _12::RequirementsType:
	'RequirementsType'
	'{'
		'requirement' '{' requirement+=TRequirement ( "," requirement+=TRequirement)* '}' 
	'}';

CapabilitiesType returns _12::CapabilitiesType:
	'CapabilitiesType'
	'{'
		'capability' '{' capability+=TCapability ( "," capability+=TCapability)* '}' 
	'}';

PoliciesType returns _12::PoliciesType:
	'PoliciesType'
	'{'
		'policy' '{' policy+=TPolicy ( "," policy+=TPolicy)* '}' 
	'}';

TDeploymentArtifacts returns _12::TDeploymentArtifacts:
	'TDeploymentArtifacts'
	'{'
		'deploymentArtifact' '{' deploymentArtifact+=TDeploymentArtifact ( "," deploymentArtifact+=TDeploymentArtifact)* '}' 
	'}';

MaxInstancesType returns _12::MaxInstancesType:
	'MaxInstancesType' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

TProperty returns _12::TProperty:
	
		name=STRING':' '[' ( value+=STRING ( "," value+=STRING)*  )? ']'
		('"default":' '{' defaultValue+=STRING ( "," defaultValue+=STRING)* '}' )?
	;

TAttribute returns _12::TAttribute:
	{_12::TAttribute}
	'TAttribute'
	'{'
		('name' name=String0)?
		('value' value=String0)?
	'}';

TOperation returns _12::TOperation:
	'TOperation'
	'{'
		'name' name=NCName
		('scriptPath' scriptPath=EString)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('inputParameters' inputParameters=InputParametersType)?
		('outputParameters' outputParameters=OutputParametersType)?
	'}';

InputParametersType returns _12::InputParametersType:
	'InputParametersType'
	'{'
		'inputParameter' '{' inputParameter+=TParameter ( "," inputParameter+=TParameter)* '}' 
	'}';

OutputParametersType returns _12::OutputParametersType:
	'OutputParametersType'
	'{'
		'outputParameter' '{' outputParameter+=TParameter ( "," outputParameter+=TParameter)* '}' 
	'}';

TParameter returns _12::TParameter:
	'TParameter'
	'{'
		'name' name=String0
		('required' required=TBoolean)?
		'type' type=String0
	'}';

enum TBoolean returns _12::TBoolean:
				yes = 'yes' | no = 'no';

TRequirement returns _12::TRequirement:
	'TRequirement'
	id=ID0
	'{'
		'type' type=EString
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
	'}';

TCapability returns _12::TCapability:
	'TCapability'
	id=ID0
	'{'
		'type' type=EString
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
	'}';

TDeploymentArtifact returns _12::TDeploymentArtifact:
	'TDeploymentArtifact'
	'{'
		('artifactRef' artifactRef=QName)?
		'artifactType' artifactType=QName
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

SourceElementType returns _12::SourceElementType:
	'SourceElementType'
	'{'
		'ref' ref=IDREF
	'}';

TargetElementType returns _12::TargetElementType:
	'TargetElementType'
	'{'
		'ref' ref=IDREF
	'}';

RelationshipConstraintsType returns _12::RelationshipConstraintsType:
	'RelationshipConstraintsType'
	'{'
		'relationshipConstraint' '{' relationshipConstraint+=RelationshipConstraintType ( "," relationshipConstraint+=RelationshipConstraintType)* '}' 
	'}';

RelationshipConstraintType returns _12::RelationshipConstraintType:
	'RelationshipConstraintType'
	'{'
		'constraintType' constraintType=AnyURI
	'}';

TPlan returns _12::TPlan:
	'TPlan'
	id=ID0
	'{'
		('name' name=String0)?
		'planLanguage' planLanguage=AnyURI
		'planType' planType=AnyURI
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('precondition' precondition=TCondition)?
		('inputParameters' inputParameters=InputParametersType1)?
		('outputParameters' outputParameters=OutputParametersType1)?
		('planModel' planModel=PlanModelType)?
		('planModelReference' planModelReference=PlanModelReferenceType)?
	'}';

TCondition returns _12::TCondition:
	'TCondition'
	'{'
		'expressionLanguage' expressionLanguage=AnyURI
	'}';

InputParametersType1 returns _12::InputParametersType1:
	'InputParametersType1'
	'{'
		'inputParameter' '{' inputParameter+=TParameter ( "," inputParameter+=TParameter)* '}' 
	'}';

OutputParametersType1 returns _12::OutputParametersType1:
	'OutputParametersType1'
	'{'
		'outputParameter' '{' outputParameter+=TParameter ( "," outputParameter+=TParameter)* '}' 
	'}';

PlanModelType returns _12::PlanModelType:
	{_12::PlanModelType}
	'PlanModelType'
	;

PlanModelReferenceType returns _12::PlanModelReferenceType:
	'PlanModelReferenceType'
	'{'
		'reference' reference=AnyURI
	'}';

DerivedFromType2 returns _12::DerivedFromType2:
	'DerivedFromType2'
	'{'
		'typeRef' typeRef=QName
	'}';

PropertiesDefinitionType returns _12::PropertiesDefinitionType:
	{_12::PropertiesDefinitionType}
	'PropertiesDefinitionType'
	'{'
		('element' element=QName)?
		('type' type=QName)?
		('hasSomProperties' hasSomProperties=PropertiesType)?
	'}';

RequirementDefinitionsType returns _12::RequirementDefinitionsType:
	'RequirementDefinitionsType'
	'{'
		'requirementDefinition' '{' requirementDefinition+=TRequirementDefinition ( "," requirementDefinition+=TRequirementDefinition)* '}' 
	'}';

CapabilityDefinitionsType returns _12::CapabilityDefinitionsType:
	'CapabilityDefinitionsType'
	'{'
		'capabilityDefinition' '{' capabilityDefinition+=TCapabilityDefinition ( "," capabilityDefinition+=TCapabilityDefinition)* '}' 
	'}';

TTopologyElementInstanceStates returns _12::TTopologyElementInstanceStates:
	'TTopologyElementInstanceStates'
	'{'
		'instanceState' '{' instanceState+=InstanceStateType ( "," instanceState+=InstanceStateType)* '}' 
	'}';

InterfacesType returns _12::InterfacesType:
	'InterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

TRequirementDefinition returns _12::TRequirementDefinition:
	'TRequirementDefinition'
	'{'
		('lowerBound' lowerBound=Int0)?
		'name' name=String0
		'requirementType' requirementType=QName
		('upperBound' upperBound=UpperBoundType1)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType1)?
	'}';

ConstraintsType1 returns _12::ConstraintsType1:
	'ConstraintsType1'
	'{'
		'constraint' '{' constraint+=TConstraint ( "," constraint+=TConstraint)* '}' 
	'}';

UpperBoundType1 returns _12::UpperBoundType1:
	'UpperBoundType1' /* TODO: implement this rule and an appropriate IValueConverter */;

TConstraint_Impl returns _12::TConstraint:
	'TConstraint'
	'{'
		'constraintType' constraintType=AnyURI
	'}';

TCapabilityDefinition returns _12::TCapabilityDefinition:
	'TCapabilityDefinition'
	'{'
		'capabilityType' capabilityType=QName
		('lowerBound' lowerBound=Int0)?
		'name' name=String0
		('upperBound' upperBound=UpperBoundType)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType)?
	'}';

ConstraintsType returns _12::ConstraintsType:
	'ConstraintsType'
	'{'
		'constraint' '{' constraint+=TConstraint ( "," constraint+=TConstraint)* '}' 
	'}';

UpperBoundType returns _12::UpperBoundType:
	'UpperBoundType' /* TODO: implement this rule and an appropriate IValueConverter */;

InstanceStateType returns _12::InstanceStateType:
	'InstanceStateType'
	'{'
		'state' state=AnyURI
	'}';

SourceInterfacesType returns _12::SourceInterfacesType:
	'SourceInterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

TargetInterfacesType returns _12::TargetInterfacesType:
	'TargetInterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

ValidSourceType returns _12::ValidSourceType:
	'ValidSourceType'
	'{'
		'typeRef' typeRef=QName
	'}';

ValidTargetType returns _12::ValidTargetType:
	'ValidTargetType'
	'{'
		'typeRef' typeRef=QName
	'}';
