// automatically generated by Xtext
grammar org.xtext.example.yaml.MyDsl with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.polimi.mymodelingproject/model/TOSCA/_12.ecore" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.w3.org/XML/1998/namespace" as namespace

TServiceTemplate returns TServiceTemplate:
	id=ID0':'
	
	
		( name=String0)? '\n\t'
		('Imports: \n\t' hasImports=TimportTemplate)? '\n'
		('node_types: \n\t'  hasNodeType+=TNodeType ( "\n\t" hasNodeType+=TNodeType)*  '\n')?
		('relationships: \n\t'  hasRelationship+=TRelationshipType '\n\t' (  hasRelationship+=TRelationshipType '\n\t')*  )? '\n'
		('substitutableNodeType' substitutableNodeType=QName)?
		('targetNamespace' targetNamespace=AnyURI)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('boundaryDefinitions' boundaryDefinitions=TBoundaryDefinitions)?
		( topologyTemplate=TTopologyTemplate) '\n'
		('plans' plans=TPlans)?
		
		
		
	;







TConstraint returns TConstraint:
	TConstraint_Impl | TPropertyConstraint;


TDocumentation returns TDocumentation:
	{TDocumentation}
	'TDocumentation'
	'{'
		('lang' lang=LangType)?
		('source' source=AnyURI)?
	'}';

TTags returns TTags:
	'TTags'
	'{'
		'tag' '{' tag+=TTag ( "," tag+=TTag)* '}' 
	'}';

TBoundaryDefinitions returns TBoundaryDefinitions:
	{TBoundaryDefinitions}
	'TBoundaryDefinitions'
	'{'
		('properties' properties=PropertiesType1)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType1)?
		('requirements' requirements=RequirementsType1)?
		('capabilities' capabilities=CapabilitiesType1)?
		('policies' policies=PoliciesType1)?
		('interfaces' interfaces=InterfacesType1)?
	'}';

TTopologyTemplate returns TTopologyTemplate:
	{TTopologyTemplate}
	
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('inputs: \n\t'  hasInputs+=TInputTemplate ( "\n\t" hasInputs+=TInputTemplate)*  )? '\n\n'
		('node_templates: \n\t'  nodeTemplate+=TNodeTemplate ( " " nodeTemplate+=TNodeTemplate)*  )? '\n'
		('relationshipTemplate' '{' relationshipTemplate+=TRelationshipTemplate ( "," relationshipTemplate+=TRelationshipTemplate)* '}' )?
		
		('outputs: \n\t'  hasoutPuts+=TOutputTemplate ( "\n\t" hasoutPuts+=TOutputTemplate)*  )?
	;

TPlans returns TPlans:
	'TPlans'
	'{'
		('targetNamespace' targetNamespace=AnyURI)?
		'plan' '{' plan+=TPlan ( "," plan+=TPlan)* '}' 
	'}';

ID0 returns type::ID:
	'ID' /* TODO: implement this rule and an appropriate IValueConverter */;

String0 returns type::String:
	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

QName returns type::QName:
	'QName' /* TODO: implement this rule and an appropriate IValueConverter */;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

TNodeType returns TNodeType:
	('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
	     name=NCName': \n\t'
		('targetNamespace' targetNamespace=AnyURI)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derived_from:' derivedFrom=DerivedFromType2 '\n\t')?
		('properties: \n\t' propertiesDefinition=PropertiesDefinitionType)?
		('requirementDefinitions' requirementDefinitions=RequirementDefinitionsType)?
		('capabilityDefinitions' capabilityDefinitions=CapabilityDefinitionsType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('interfaces' interfaces=InterfacesType)?
	;

TRelationshipType returns TRelationshipType:
	('abstract' abstract=TBoolean)?
		('final' final=TBoolean)?
		 name=NCName '\n\t'
		('target:' targetNamespace=AnyURI '\n\t')? 
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('tags' tags=TTags)?
		('derived_from:' derivedFrom=DerivedFromType2 '\n\t')? 
		('propertiesDefinition' propertiesDefinition=PropertiesDefinitionType)?
		('instanceStates' instanceStates=TTopologyElementInstanceStates)?
		('source_interfaces: \n\t' sourceInterfaces=SourceInterfacesType '\n\t')?
		('target_interfaces: \n\t' targetInterfaces=TargetInterfacesType '\n\t')?
		('validSource' validSource=ValidSourceType)?
		('validTarget' validTarget=ValidTargetType)?
	;

TimportTemplate returns TimportTemplate:
	
		'- ' value+=EString ( "\n\t - " value+=EString)* 
	;


LangType returns namespace::LangType:
	'LangType' /* TODO: implement this rule and an appropriate IValueConverter */;

TTag returns TTag:
	'TTag'
	'{'
		'name' name=String0
		'value' value=String0
	'}';

PropertiesType1 returns PropertiesType1:
	{PropertiesType1}
	'PropertiesType1'
	'{'
		('propertyMappings' propertyMappings=PropertyMappingsType)?
	'}';

PropertyConstraintsType1 returns PropertyConstraintsType1:
	'PropertyConstraintsType1'
	'{'
		'propertyConstraint' '{' propertyConstraint+=TPropertyConstraint ( "," propertyConstraint+=TPropertyConstraint)* '}' 
	'}';

RequirementsType1 returns RequirementsType1:
	'RequirementsType1'
	'{'
		'requirement' '{' requirement+=TRequirementRef ( "," requirement+=TRequirementRef)* '}' 
	'}';

CapabilitiesType1 returns CapabilitiesType1:
	'CapabilitiesType1'
	'{'
		'capability' '{' capability+=TCapabilityRef ( "," capability+=TCapabilityRef)* '}' 
	'}';

PoliciesType1 returns PoliciesType1:
	'PoliciesType1'
	'{'
		'policy' '{' policy+=TPolicy ( "," policy+=TPolicy)* '}' 
	'}';

InterfacesType1 returns InterfacesType1:
	'InterfacesType1'
	'{'
		'interface' '{' interface+=TExportedInterface ( "," interface+=TExportedInterface)* '}' 
	'}';

PropertyMappingsType returns PropertyMappingsType:
	'PropertyMappingsType'
	'{'
		'propertyMapping' '{' propertyMapping+=TPropertyMapping ( "," propertyMapping+=TPropertyMapping)* '}' 
	'}';

TPropertyMapping returns TPropertyMapping:
	'TPropertyMapping'
	'{'
		'serviceTemplatePropertyRef' serviceTemplatePropertyRef=String0
		'targetObjectRef' targetObjectRef=IDREF
		'targetPropertyRef' targetPropertyRef=String0
	'}';

IDREF returns type::IDREF:
	'IDREF' /* TODO: implement this rule and an appropriate IValueConverter */;

TPropertyConstraint returns TPropertyConstraint:
	'TPropertyConstraint'
	'{'
		'constraintType' constraintType=AnyURI
		'property' property=String0
	'}';

TRequirementRef returns TRequirementRef:
	'TRequirementRef'
	'{'
		('name' name=String0)?
		'ref' ref=IDREF
	'}';

TCapabilityRef returns TCapabilityRef:
	'TCapabilityRef'
	'{'
		('name' name=String0)?
		'ref' ref=IDREF
	'}';

TPolicy returns TPolicy:
	'TPolicy'
	'{'
		('name' name=String0)?
		('policyRef' policyRef=QName)?
		'policyType' policyType=QName
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

TExportedInterface returns TExportedInterface:
	'TExportedInterface'
	'{'
		'name' name=AnyURI
		'operation' '{' operation+=TExportedOperation ( "," operation+=TExportedOperation)* '}' 
	'}';

TExportedOperation returns TExportedOperation:
	'TExportedOperation'
	'{'
		'name' name=NCName
		('nodeOperation' nodeOperation=NodeOperationType)?
		('relationshipOperation' relationshipOperation=RelationshipOperationType)?
		('plan' plan=PlanType)?
	'}';

NodeOperationType returns NodeOperationType:
	'NodeOperationType'
	'{'
		'interfaceName' interfaceName=AnyURI
		'nodeRef' nodeRef=IDREF
		'operationName' operationName=NCName
	'}';

RelationshipOperationType returns RelationshipOperationType:
	'RelationshipOperationType'
	'{'
		'interfaceName' interfaceName=AnyURI
		'operationName' operationName=NCName
		'relationshipRef' relationshipRef=IDREF
	'}';

PlanType returns PlanType:
	'PlanType'
	'{'
		'planRef' planRef=IDREF
	'}';

NCName returns type::NCName:
	'NCName' /* TODO: implement this rule and an appropriate IValueConverter */;

TNodeTemplate returns TNodeTemplate:
	id=ID0': \n\t\t' 
	
		'type:' type=EString  '\n\t'
		('maxInstances' maxInstances=MaxInstancesType '\n\t')? 
		('minInstances' minInstances=Int0 '\n\t')?  
		( name=String0 '\n\t')?   
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?  
		('properties: \n\t' properties=PropertiesType )? 
		('propertyConstraints' propertyConstraints=PropertyConstraintsType '\n')? 
		('attributes' attributes=AttributesType '\n')? 
		('interfaces: \n\t' nodeHasInterface=TInterface '\n')? 
		('relationships: \n\t -type:'  nodeHasRelations+=TRelationshipType ( "\n\t -type:" nodeHasRelations+=TRelationshipType)*  )? '\n'
		('requirements' requirements=RequirementsType)? '\n'
		('capabilities' capabilities=CapabilitiesType)? '\n'
		('policies' policies=PoliciesType)? '\n'
		('deploymentArtifacts' deploymentArtifacts=TDeploymentArtifacts)? '\n'
	;

TRelationshipTemplate returns TRelationshipTemplate:
	'TRelationshipTemplate'
	id=ID0
	'{'
		'type' type=EString
		('name' name=String0)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
		'sourceElement' sourceElement=SourceElementType
		'targetElement' targetElement=TargetElementType
		('relationshipConstraints' relationshipConstraints=RelationshipConstraintsType)?
		('usesRelationType' usesRelationType=TRelationshipType)?
	'}';

TInputTemplate returns TInputTemplate:
	{TInputTemplate}
	
	name=EString':'
	
		( value+=EString ( "," value+=EString)* )?
		('\n\t description:' description=EString)?
	;

TOutputTemplate returns TOutputTemplate:
	{TOutputTemplate}
	
	name=EString': \n\t'	
		'value: { get_attributes:['( value+=EString ( "," value+=EString)* )? '] } \n\t'
	;

PropertiesType returns PropertiesType:
	
		 property+=TProperty '\n\t'(  property+=TProperty '\n\t')* 
	;

PropertyConstraintsType returns PropertyConstraintsType:
	'PropertyConstraintsType'
	'{'
		'propertyConstraint' '{' propertyConstraint+=TPropertyConstraint ( "," propertyConstraint+=TPropertyConstraint)* '}' 
	'}';

EString returns ecore::EString:
	STRING | ID;

AttributesType returns AttributesType:
	'AttributesType'
	'{'
		'attribute' '{' attribute+=TAttribute ( "," attribute+=TAttribute)* '}' 
	'}';

TInterface returns TInterface:
	
		 name=AnyURI ':\n\t'
		 operation+=TOperation ( "\n\t" operation+=TOperation)* 
	;

RequirementsType returns RequirementsType:
	'RequirementsType'
	'{'
		'requirement' '{' requirement+=TRequirement ( "," requirement+=TRequirement)* '}' 
	'}';

CapabilitiesType returns CapabilitiesType:
	'CapabilitiesType'
	'{'
		'capability' '{' capability+=TCapability ( "," capability+=TCapability)* '}' 
	'}';

PoliciesType returns PoliciesType:
	'PoliciesType'
	'{'
		'policy' '{' policy+=TPolicy ( "," policy+=TPolicy)* '}' 
	'}';

TDeploymentArtifacts returns TDeploymentArtifacts:
	'TDeploymentArtifacts'
	'{'
		'deploymentArtifact' '{' deploymentArtifact+=TDeploymentArtifact ( "," deploymentArtifact+=TDeploymentArtifact)* '}' 
	'}';

MaxInstancesType returns MaxInstancesType:
	'MaxInstancesType' /* TODO: implement this rule and an appropriate IValueConverter */;

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

TProperty returns TProperty:
	
		name=String0':'
		(  value+=String0 ( "\n\t" value+=String0)* )? '\n\t'
		('default:' '{' defaultValue+=EString ( "," defaultValue+=EString)* '}' )?
	;

TAttribute returns TAttribute:
	{TAttribute}
	'TAttribute'
	'{'
		('name' name=String0)?
		('value' value=String0)?
	'}';

TOperation returns TOperation:
	 name=NCName':'
	 (scriptPath=EString)? '\n\t'
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		
		('inputs: \n\t' inputParameters=InputParametersType)?
		('outputs: \n\t' outputParameters=OutputParametersType)?
	;
		
		
		

InputParametersType returns InputParametersType:
	
		 inputParameter+=TParameter ( inputParameter+=TParameter)* 
	;


OutputParametersType returns OutputParametersType:
	 outputParameter+=TParameter ( "," outputParameter+=TParameter)* 
	 
	;

TParameter returns TParameter:
	 name=String0':'
		('required' required=TBoolean)?
		 type=String0
	;

enum TBoolean returns TBoolean:
				yes = 'yes' | no = 'no';

TRequirement returns TRequirement:
	'TRequirement'
	id=ID0
	'{'
		'type' type=EString
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
	'}';

TCapability returns TCapability:
	'TCapability'
	id=ID0
	'{'
		'type' type=EString
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('properties' properties=PropertiesType)?
		('propertyConstraints' propertyConstraints=PropertyConstraintsType)?
		('attributes' attributes=AttributesType)?
		('nodeHasInterface' nodeHasInterface=TInterface)?
		('nodeHasRelations' '{' nodeHasRelations+=TRelationshipType ( "," nodeHasRelations+=TRelationshipType)* '}' )?
	'}';

TDeploymentArtifact returns TDeploymentArtifact:
	'TDeploymentArtifact'
	'{'
		('artifactRef' artifactRef=QName)?
		'artifactType' artifactType=QName
		'name' name=String0
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
	'}';

SourceElementType returns SourceElementType:
	'SourceElementType'
	'{'
		'ref' ref=IDREF
	'}';

TargetElementType returns TargetElementType:
	'TargetElementType'
	'{'
		'ref' ref=IDREF
	'}';

RelationshipConstraintsType returns RelationshipConstraintsType:
	'RelationshipConstraintsType'
	'{'
		'relationshipConstraint' '{' relationshipConstraint+=RelationshipConstraintType ( "," relationshipConstraint+=RelationshipConstraintType)* '}' 
	'}';

RelationshipConstraintType returns RelationshipConstraintType:
	'RelationshipConstraintType'
	'{'
		'constraintType' constraintType=AnyURI
	'}';

TPlan returns TPlan:
	'TPlan'
	id=ID0
	'{'
		('name' name=String0)?
		'planLanguage' planLanguage=AnyURI
		'planType' planType=AnyURI
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('precondition' precondition=TCondition)?
		('inputParameters' inputParameters=InputParametersType1)?
		('outputParameters' outputParameters=OutputParametersType1)?
		('planModel' planModel=PlanModelType)?
		('planModelReference' planModelReference=PlanModelReferenceType)?
	'}';

TCondition returns TCondition:
	'TCondition'
	'{'
		'expressionLanguage' expressionLanguage=AnyURI
	'}';

InputParametersType1 returns InputParametersType1:
	'InputParametersType1'
	'{'
		'inputParameter' '{' inputParameter+=TParameter ( "," inputParameter+=TParameter)* '}' 
	'}';

OutputParametersType1 returns OutputParametersType1:
	'OutputParametersType1'
	'{'
		'outputParameter' '{' outputParameter+=TParameter ( "," outputParameter+=TParameter)* '}' 
	'}';

PlanModelType returns PlanModelType:
	{PlanModelType}
	'PlanModelType'
	;

PlanModelReferenceType returns PlanModelReferenceType:
	'PlanModelReferenceType'
	'{'
		'reference' reference=AnyURI
	'}';

DerivedFromType2 returns DerivedFromType2:
	 typeRef=QName
	;

PropertiesDefinitionType returns PropertiesDefinitionType:
	{PropertiesDefinitionType}
	
		('element' element=QName)?
		('type' type=QName)?
		( hasSomProperties=PropertiesType)?
	;

RequirementDefinitionsType returns RequirementDefinitionsType:
	'RequirementDefinitionsType'
	'{'
		'requirementDefinition' '{' requirementDefinition+=TRequirementDefinition ( "," requirementDefinition+=TRequirementDefinition)* '}' 
	'}';

CapabilityDefinitionsType returns CapabilityDefinitionsType:
	'CapabilityDefinitionsType'
	'{'
		'capabilityDefinition' '{' capabilityDefinition+=TCapabilityDefinition ( "," capabilityDefinition+=TCapabilityDefinition)* '}' 
	'}';

TTopologyElementInstanceStates returns TTopologyElementInstanceStates:
	'TTopologyElementInstanceStates'
	'{'
		'instanceState' '{' instanceState+=InstanceStateType ( "," instanceState+=InstanceStateType)* '}' 
	'}';

InterfacesType returns InterfacesType:
	'InterfacesType'
	'{'
		'interface' '{' interface+=TInterface ( "," interface+=TInterface)* '}' 
	'}';

TRequirementDefinition returns TRequirementDefinition:
	'TRequirementDefinition'
	'{'
		('lowerBound' lowerBound=Int0)?
		'name' name=String0
		'requirementType' requirementType=QName
		('upperBound' upperBound=UpperBoundType1)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType1)?
	'}';

ConstraintsType1 returns ConstraintsType1:
	'ConstraintsType1'
	'{'
		'constraint' '{' constraint+=TConstraint ( "," constraint+=TConstraint)* '}' 
	'}';

UpperBoundType1 returns UpperBoundType1:
	'UpperBoundType1' /* TODO: implement this rule and an appropriate IValueConverter */;

TConstraint_Impl returns TConstraint:
	'TConstraint'
	'{'
		'constraintType' constraintType=AnyURI
	'}';

TCapabilityDefinition returns TCapabilityDefinition:
	'TCapabilityDefinition'
	'{'
		'capabilityType' capabilityType=QName
		('lowerBound' lowerBound=Int0)?
		'name' name=String0
		('upperBound' upperBound=UpperBoundType)?
		('documentation' '{' documentation+=TDocumentation ( "," documentation+=TDocumentation)* '}' )?
		('constraints' constraints=ConstraintsType)?
	'}';

ConstraintsType returns ConstraintsType:
	'ConstraintsType'
	'{'
		'constraint' '{' constraint+=TConstraint ( "," constraint+=TConstraint)* '}' 
	'}';

UpperBoundType returns UpperBoundType:
	'UpperBoundType' /* TODO: implement this rule and an appropriate IValueConverter */;

InstanceStateType returns InstanceStateType:
	'InstanceStateType'
	'{'
		'state' state=AnyURI
	'}';

SourceInterfacesType returns SourceInterfacesType:
	
		 interface+=TInterface ( "\n\t" interface+=TInterface)* 
	;

TargetInterfacesType returns TargetInterfacesType:
	
	interface+=TInterface ( "\n\t" interface+=TInterface)* 
	;

ValidSourceType returns ValidSourceType:
	'ValidSourceType'
	'{'
		'typeRef' typeRef=QName
	'}';

ValidTargetType returns ValidTargetType:
	'ValidTargetType'
	'{'
		'typeRef' typeRef=QName
	'}';
